{@if !config.surroundMode}{@include file://./header-template.juicer, _}
{@/if}{@if config.surroundMode}    {@/if}{@include file://./common-fn-template.juicer, _}
/*
 * 发送请求
 * */
Utils.sendReq = function (resolve, reject, options, success, error) {
    var params = options.params;
    var pathParam = options.pathParam;
    var url = options.url;
    // 处理restful风格参数
    url = url.replace(/\{([^\{\}]+)\}/g, function (s1, s2) {
        return pathParam[s2];
    });
    superagent(options.method, url)
    {@if config.withCredentials}.withCredentials(){@/if}
        .query(params)
        .set(options.headers || {})
        .send(options.data)
        .end(function (_err, res) {
            var data;
            var err = _err;
            if (!err && res.ok) {
                data = res.body;
                if (Utils.isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
            } else {
                if (!err.response) {
                    err.response = {};
                }
                err = {
                    status: err.status,
                    headers: err.response.headers,
                    config: err.response.req,
                    message: err.message
                };
                if (Utils.isFunction(error)) {
                    err = error(err);
                }
                reject(err);
            }
        });
};

{@if config.promiseInject}{@include file://./es6-promise-polyfill.juicer, _}{@/if}

function $${config.apiName} (options) {
    var domain = '$${swagger.domain}';
    var basePathNew = '$${swagger.basePathNew}';
    var domainNew = (Utils.isObject(options)) ? options.domain : options;
    domain = (typeof domainNew === 'string') ? domainNew : domain;
    this.urlPre = domain + basePathNew;
}

{@each swagger.paths as path,index}
    {@each path as req,key}
/*
 * $${req.summary}
 {@each req.parameters as parameter,pIndex}
 * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
 {@/each}
 * */
$${config.apiName}.prototype.$${req.fnName} = function (_paramObj, success, error) {
    var paramObj = _paramObj;
    var self = this;
    if (!Utils.isObject(paramObj)) {
        paramObj = {};
    }
    if (!Promise) {
        throw new Error('需要Promise,请加入Promise依赖!');
    }
    return new Promise(function (resolve, reject) {
        var paramArr = [];
        var options;
        {@each req.parameters as parameter,pIndex}
        paramArr.push({
            name: '$${parameter.name}',
            required: {@if parameter.required}true{@else}false{@/if},
            localIn: '$${parameter.in}'
        });
        {@/each}
        if (Utils.lackParam(reject, paramArr, paramObj, error)) {
            return false;
        }
        options = {
            url: self.urlPre + '$${index}',
            {@if req.headerStr}headers: {@/if}$${req.headerStr}{@if req.headerStr},{@/if}
            method: '$${key}'
        };
        options = Utils.getOptions(options, paramArr, paramObj);
    {@if req.transformRequestAsForm}
        options.transformRequest = {@if req.transformRequestFormData}Utils.transformRequestFormData{@else}Utils.transformRequestAsForm{@/if};
    {@/if}
        Utils.sendReq(resolve, reject, options, success, error);
        return true;
    });
};
    {@/each}
{@/each}

{@if config.surroundMode}return $${config.apiName};{@/if}