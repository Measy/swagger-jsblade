{@if !config.surroundMode}{@include file://./header-template.juicer, _}
{@/if}{@if config.surroundMode}    {@/if}{@include file://./common-fn-template.juicer, _}
/*
 * interceptor, 钩子函数,支持返回promise形式和数据形式
 * */
Utils.interceptor = {
    request: function (config) {
        return config;
    },
    requestError: function (err) {
        return err;
    },
    response: function (response) {
        return response;
    },
    responseError: function (err) {
        return err;
    }
};

/*
 * 是否使用钩子
 * */
Utils.useInterceptor = false;

/*
 * 发送请求
 * */
Utils.sendReq = function (resolve, reject, _options, success, error) {
    var postFnStr = 'send';
    if (_options.isForm) {
        postFnStr = 'field';
    }
    delete _options.isForm;
    if (Utils.useInterceptor) {
        var promisePre = new Promise(function (preResolve, preReject) {
            preResolve(_options);
        });
        promisePre
            .then(function (config) {
                return Utils.interceptor.request(config);
            })
            .catch(function (err) {
                return Utils.interceptor.requestError(err);
            })
            .then(function (options) {
                return new Promise(function (sufResolve, sufReject) {
                    superagent(options.method, options.url)
                        {@if config.withCredentials}.withCredentials(){@/if}
                        .query(options.params)
                        .set(options.headers || {})
                        [postFnStr](options.data)
                        .end(function (_err, _res) {
                            var res = _res || {};
                            if (_err) {
                                res.error = res.error || _err;
                                res.req = res.req || _err;
                            }
                            sufResolve(res);
                        });
                });
            })
            .then(function (res) {
                return Utils.interceptor.response(res);
            })
            .then(function (res) {
                var err = res.error;
                var data = res.body;
                if (err) {
                    return Utils.interceptor.responseError({
                        status: res.status || err.status,
                        headers: res.headers || {},
                        config: res.req || {},
                        message: res.statusText || err.message || ''
                    });
                }
                if (Utils.isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
                return null;
            })
            .then(function (_err) {
                var err = _err;
                if (err) {
                    if (Utils.isFunction(error)) {
                        err = error(err);
                    }
                    reject(err);
                }
            });
    } else {
        superagent(_options.method, _options.url)
            {@if config.withCredentials}.withCredentials(){@/if}
            .query(_options.params)
            .set(_options.headers || {})
            [postFnStr](_options.data)
            .end(function (_err, res) {
                var data;
                var err = _err;
                if (!err) {
                    data = res.body;
                    if (Utils.isFunction(success)) {
                        data = success(data);
                    }
                    resolve(data);
                } else {
                    if (!err.response) {
                        err.response = {};
                    }
                    err = {
                        status: err.status,
                        headers: err.response.headers,
                        config: err.response.req,
                        message: err.message
                    };
                    if (Utils.isFunction(error)) {
                        err = error(err);
                    }
                    reject(err);
                }
            });
    }
};

/*
* apiCommon
* api调用中的公共部分
* */
Utils.apiCommon = function (_paramObj, options, a, success, error) {
    var paramObj = _paramObj;
    var paramArr = Utils.paramArr(a);
    if (!Utils.isObject(paramObj)) {
        paramObj = {};
    }
    if (!Promise) {
        throw new Error('需要Promise,请加入Promise依赖!');
    }
    return new Promise(function (resolve, reject) {
        if (Utils.lackParam(reject, paramArr, paramObj, error)) {
            return false;
        }
        options = Utils.getOptions(options, paramArr, paramObj);
        Utils.sendReq(resolve, reject, options, success, error);
        return true;
    });
};

{@if config.promiseInject}{@include file://./es6-promise-polyfill.juicer, _}{@/if}

function $${config.apiName} (options) {
    var domain = '$${swagger.domain}';
    var basePathNew = '$${swagger.basePathNew}';
    var domainNew = (Utils.isObject(options)) ? options.domain : options;
    domain = (typeof domainNew === 'string') ? domainNew : domain;
    this.urlPre = domain + basePathNew;
}

$${config.apiName}.interceptor = function (injectObj) {
    if (injectObj.request) {
        Utils.interceptor.request = injectObj.request;
        Utils.useInterceptor = true;
    }
    if (injectObj.requestError) {
        Utils.interceptor.requestError = injectObj.requestError;
        Utils.useInterceptor = true;
    }
    if (injectObj.response) {
        Utils.interceptor.response = injectObj.response;
        Utils.useInterceptor = true;
    }
    if (injectObj.responseError) {
        Utils.interceptor.responseError = injectObj.responseError;
        Utils.useInterceptor = true;
    }
};

{@each swagger.paths as path,index}
    {@each path as req,key}
/*
 * $${req.summary}
 {@each req.parameters as parameter,pIndex}
 * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
 {@/each}
 * */
$${config.apiName}.prototype.$${req.fnName} = function (_paramObj, success, error) {
    var arr = [];
    var options = {url: this.urlPre + '$${index}', {@if req.headerStr}headers: {@/if}$${req.headerStr}{@if req.headerStr}, {@/if}method: '$${key}'};
    {@if req.transformRequestAsForm}
    options.transformRequest = {@if req.transformRequestFormData}Utils.transformRequestFormData{@else}Utils.transformRequestAsForm{@/if};
    {@/if}
    {@each req.parameters as parameter,pIndex}
    arr.push(['$${parameter.name}', {@if parameter.required}true{@else}false{@/if}, '$${parameter.in}']);
    {@/each}
    return Utils.apiCommon(_paramObj, options, arr, success, error);
};
    {@/each}
{@/each}

{@if config.surroundMode}return $${config.apiName};{@/if}