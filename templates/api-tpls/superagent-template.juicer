{@if !config.surroundMode}/**
 * 标题：          $${swagger.info.title}
 * 版本：          $${swagger.info.version}
 * 描述：          $${swagger.info.description}
 * 时间：          $${config.createTime}
 * swagger版本：   $${swagger.swagger}
 */
{@/if}{@if config.surroundMode}    {@/if}var domain = '$${swagger.domain}';
var basePathNew = '$${swagger.basePathNew}';
function $${config.apiName} (options) {
    var domainNew = (isObject(options)) ? options.domain : options;
    domain = (typeof domainNew === 'string') ? domainNew : domain;
    this.urlPre = domain + basePathNew;
}

{@each swagger.paths as path,index}
    {@each path as req,key}
/*
 * $${req.description}
 {@each req.parameters as parameter,pIndex}
 * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
 {@/each}
 * */
$${config.apiName}.prototype.$${req.fnName} = function (paramObj, success, error) {
    if (!isObject(paramObj)) {
        paramObj = {};
    }
    if (!Promise) {
        throw new Error('需要Promise,请加入Promise依赖!');
    }
    var self = this;
    return new Promise(function (resolve, reject) {
        var paramArr = [];
        {@each req.parameters as parameter,pIndex}
        paramArr.push({
            name: '$${parameter.name}',
            required: {@if parameter.required}true{@else}false{@/if},
            localIn: '$${parameter.in}'
        });
        {@/each}
        lackParam(reject, paramArr, paramObj, error);
        var options = {
            url: self.urlPre + '$${index}',
            {@if req.headerStr}headers: {@/if}$${req.headerStr}{@if req.headerStr},{@/if}
            method: '$${key}'
        };
        options = getOptions (options, paramArr, paramObj);
    {@if req.transformRequestAsForm}
        options.transformRequest = {@if req.transformRequestFormData}transformRequestFormData{@else}transformRequestAsForm{@/if};
    {@/if}
        sendReq (resolve, reject, options, success, error);
    });
};
    {@/each}
{@/each}

/*
* 发送请求
* */
function sendReq (resolve, reject, options, success, error) {
    var params = options.params;
    var url = options.url;
    // 处理restful风格参数
    url = url.replace(/\{([^\{\}]+)\}/g, function (s1, s2) {
        return params[s2] || '';
    });
    superagent(options.method, url)
        {@if config.withCredentials}.withCredentials(){@/if}
        .query(params)
        .set(options.headers || {})
        .send(options.data)
        .end(function(err, res){
            if (!err && res.ok) {
                var data = res.body;
                if (isFunction(success)) {
                    data = success(data);
                }
                resolve(data);
            } else {
                err = {
                    status: err.status,
                    headers: err.responseheaders.headers,
                    config: err.responseheaders.req,
                    message: err.message
                };
                if (isFunction(error)) {
                    err = error(err);
                }
                reject(err);
            }
        });
}
/*
* 生成options
* */
function getOptions (options, paramArr, paramObj) {
    var objParam = {};
    var tempObj = getParams (paramArr, paramObj);
    var form = tempObj.form;
    var body = tempObj.body;
    var headers = tempObj.headers;
    var urlParam = tempObj.urlParam;
    if (Object.keys(form).length > 0) {
        objParam = form;
    } else {
        objParam = body;
    }
    options.params = urlParam;
    options.data = objParam;

    var headerKeys = Object.keys(headers);
    if (headerKeys.length > 0) {
        var temp;
        options.headers = options.headers || {};
        headerKeys.forEach(function (key) {
            temp = headers[key];
            options.headers[key] = headers[key];
        });
    }
    return options;
}

/*
* toJsonReplacer
* */
function toJsonReplacer(key, value) {
    var val = value;

    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
        val = undefined;
    } else if (value && value.window === value) {
        val = '$WINDOW';
    } else if (value &&  window.document === value) {
        val = '$DOCUMENT';
    } else if (value && value.$evalAsync && value.$watch) {
        val = '$SCOPE';
    }

    return val;
}

{@include file://./common-fn-template.juicer, _}
{@if config.surroundMode}return $${config.apiName};{@/if}