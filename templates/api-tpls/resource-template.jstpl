/**
 * 标题：          $${swagger.info.title}
 * 版本：          $${swagger.info.version}
 * 描述：          $${swagger.info.description}
 * 时间：          $${config.createTime}
 * swagger版本：   $${swagger.swagger}
 */
var app = angular.module('$${config.apiName}Module', [
    'ngResource'
]);

/*
* 外部暴露使用的API
* */
app.factory('$${config.apiName}', ['__$${config.apiName}__', '$q', function (innerApi, $q) {
    return {
    {@each swagger.paths as path,index}
        {@each path as req,key}
        /*
         * $${req.description}
         {@each req.parameters as parameter,pIndex}
         * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
         {@/each}
         * */
        $${req.fnName}: function (paramObj, success, error) {
            if (!angular.isObject(paramObj)) {
                paramObj = {};
            }
            var tempObj = {};
            var objParam = {};
            var deferred = $q.defer();
            var paramArr = [];
            {@each req.parameters as parameter,pIndex}
            paramArr.push({
                name: '$${parameter.name}',
                required: {@if parameter.required}true{@else}false{@/if},
                localIn: '$${parameter.in}'
            });
            {@/each}
            if (lackParam(deferred, paramArr, paramObj, error)) {
                return deferred.promise;
            }
            tempObj = setParams (tempObj, paramArr, paramObj);
            var form = tempObj.form;
            var body = tempObj.body;
            var headers = tempObj.headers;
            var urlParam = tempObj.urlParam;
            if (Object.keys(form).length > 0) {
                objParam = form;
            } else {
                objParam = body;
            }
            if (Object.keys(headers).length > 0) {
                objParam = {
                    headers: headers,
                    other: objParam
                };
            }
            return innerApi.$${req.fnName}(urlParam, objParam, success, error).$promise;
        }{@if !req.lastOneReq},{@/if}
        {@/each}
    {@/each}
    };
}]);

/*
 * 内部调用API
 * */
app.factory('__$${config.apiName}__', ['$resource', function ($resource) {
    var urlPre = '$${swagger.urlPre}';
    return $resource('', {}, {
{@each swagger.paths as path,index}
    {@each path as req,key}
        /*
         * $${req.description}
         * */
        $${req.fnName}: {
            url: urlPre + '$${swagger.pathsUrl[index]}',$${req.headerStr}
        {@if req.hasInHeader || req.transformRequestAsForm}
            transformRequest: [
                {@if req.hasInHeader}
                function (objParam, headersGetter) {
                    var headers = headersGetter();
                    var temp;
                    var data = objParam.headers;
                    Object.keys(data).forEach(function (key, index) {
                        temp = data[key];
                        if (typeof temp !== 'undefined' && temp !== null) {
                            headers[key] = temp;
                        }
                    });
                    {@if req.transformRequestAsForm}
                    return objParam.other;
                    {@else}
                    return angular.toJson(objParam.other);
                    {@/if}
                }{@/if}{@if req.transformRequestAsForm}{@if req.hasInHeader},
                    {@/if}
                    {@if req.transformRequestFormData}
                transformRequestFormData
                    {@else}
                transformRequestAsForm
                    {@/if}
                {@/if}
            ],
        {@/if}
            method: '$${key}'
        }{@if !req.lastOneReq},{@/if}
    {@/each}
{@/each}
    });
}]);

/*
* 参数赋值
* */

function setParams (tempObj, paramArr, paramObj) {
    tempObj.urlParam = {};
    tempObj.body = {};
    tempObj.form = {};
    tempObj.headers = {};
    var key;
    var localIn;
    var temp;
    paramArr.forEach(function (item, index) {
        key = item.name;
        localIn = item.localIn;
        temp = paramObj[key];
        if (typeof temp !== 'undefined' && temp !== null) {
            switch (localIn) {
                case 'body':
                    tempObj.body = temp;
                    break;
                case 'formData':
                    tempObj.form[key] = temp;
                    break;
                case 'header':
                    tempObj.headers[key] = temp;
                    break;
                default:
                    tempObj.urlParam[key] = temp;
            }
        }
    });
    return tempObj;
}

/*
* 必须参数校验
* */
function lackParam (deferred, paramArr, paramObj, error) {
    var key;
    var required;
    var lackArr = [];
    paramArr.forEach(function (item, index) {
        key = item.name;
        required = item.required;
        if (required && (typeof paramObj[key] === 'undefined' || paramObj[key] === null)) {
            lackArr.push(key);
        }
    });
    if (lackArr.length > 0) {
        var err = new Error('缺少必要参数: ' + lackArr.join(', ') + ' !');
        if (angular.isFunction(error)) {
            err = error(err);
        }
        deferred.reject(err);
        return true;
    } else {
        return false;
    }
}

/*
* multipart/form-data 类型表单,通常用于上传文件
* */
function transformRequestFormData(data, headersGetter) {
    // Here we set the Content-Type header to null.
    var headers = headersGetter();
    headers['Content-Type'] = undefined;

    // And here begins the logic which could be used somewhere else
    // as noted above.
    if (data == undefined) {
        return data;
    }
    var fd = new FormData();
    var createKey = function(_keys_, currentKey) {
        var keys = angular.copy(_keys_);
        keys.push(currentKey);
        var formKey = keys.shift();
        if (keys.length) {
            formKey += "[" + keys.join("][") + "]"
        }
        return formKey;
    };

    var addToFd = function(object, keys) {
        angular.forEach(object, function(value, key) {
            var formKey = createKey(keys, key);

            if (value instanceof File) {
                fd.append(formKey, value);
            } else if (value instanceof FileList) {
                if (value.length == 1) {
                    fd.append(formKey, value[0]);
                } else {
                    angular.forEach(value, function(file, index) {
                        fd.append(formKey + '[' + index + ']', file);
                    });
                }
            } else if (value && (typeof value === 'object')) {
                var _keys = angular.copy(keys);
                _keys.push(key);
                addToFd(value, _keys);
            } else {
                fd.append(formKey, value);
            }
        });
    };
    addToFd(data, []);
    return fd;
}

/*
 * application/x-www-form-urlencoded 类型表单,普通表单类型
 * */

function transformRequestAsForm(data, getHeaders) {
    function rfc3986 (str) {
        return str.replace(/[!'()*]/g, function (c) {
            return '%' + c.charCodeAt(0).toString(16).toUpperCase();
        });
    }
    var headers = getHeaders();
    headers[ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=utf-8';

    // If this is not an object, defer to native stringification.
    if (!angular.isObject(data)) {
        return ((data == null) ? '' : data.toString());
    }

    var buffer = [];

    // Serialize each key in the object.
    angular.forEach(data, function (value, key) {
        if (value == null) {
            value = '';
        } else if (angular.isObject(value)) {
            value = angular.toJson(value);
        }
        buffer.push(encodeURIComponent(key) + '=' + encodeURIComponent((value == null) ? '' : value));
    });

    // Serialize the buffer and clean it up for transportation.

    var encodedStr = buffer.join('&').replace(/%20/g, '+');
    return rfc3986(encodedStr);
}

