{@if !config.surroundMode}/**
 * 标题：          $${swagger.info.title}
 * 版本：          $${swagger.info.version}
 * 描述：          $${swagger.info.description}
 * 时间：          $${config.createTime}
 * swagger版本：   $${swagger.swagger}
 */
/*eslint-disable */
'use strict';
{@/if}{@if config.surroundMode}    {@/if}{@include file://./common-fn-template.juicer, _}
/*
 * 发送请求
 * */
Utils.sendReq = function ($http, deferred, options, success, error) {
    var err;
    var params = options.params;
    var url = options.url;
    // 处理restful风格参数
    url = url.replace(/\{([^\{\}]+)\}/g, function (s1, s2) {
        return params[s2];
    });
    options.url = url;
    {@if config.withCredentials}options.withCredentials = true;{@/if}
    $http(options)
        .success(function (_data) {
            var data = _data;
            if (angular.isFunction(success)) {
                data = success(data);
            }
            deferred.resolve(data);
        })
        .error(function (data, status, headers, config) {
            err = {
                status: status,
                headers: headers,
                config: config,
                message: data
            };
            if (angular.isFunction(error)) {
                err = error(err);
            }
            deferred.reject(err);
        });
};
/*
 * 生成options
 * */
Utils.getOptions = function (options, paramArr, paramObj) {
    var objParam = {};
    var tempObj = Utils.getParams(paramArr, paramObj);
    var form = tempObj.form;
    var body = tempObj.body;
    var headers = tempObj.headers;
    var urlParam = tempObj.urlParam;
    var headerKeys;
    if (Object.keys(form).length > 0) {
        objParam = form;
    } else {
        objParam = body;
    }
    options.params = urlParam;
    options.data = objParam;

    headerKeys = Object.keys(headers);
    if (headerKeys.length > 0) {
        options.headers = options.headers || {};
        headerKeys.forEach(function (key) {
            options.headers[key] = headers[key];
        });
    }
    return options;
};

/*
 * toJsonReplacer
 * */
Utils.toJsonReplacer = function (key, value) {
    var val = value;
    var undefinedValue;
    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
        val = undefinedValue;
    } else if (value && value.window === value) {
        val = '$WINDOW';
    } else if (value && window.document === value) {
        val = '$DOCUMENT';
    } else if (value && value.$evalAsync && value.$watch) {
        val = '$SCOPE';
    }

    return val;
};

angular.module('$${config.apiName}Module', [])

/*
* 外部暴露使用的API
* */
.factory('$${config.apiName}', ['$http', '$q', function ($http, $q) {
    var domain = '$${swagger.domain}';
    var basePathNew = '$${swagger.basePathNew}';
    function $${config.apiName} (options) {
        var domainNew = (angular.isObject(options)) ? options.domain : options;
        domain = (typeof domainNew === 'string') ? domainNew : domain;
        this.urlPre = domain + basePathNew;
    }

    {@each swagger.paths as path,index}
        {@each path as req,key}
    /*
     * $${req.summary}
     {@each req.parameters as parameter,pIndex}
     * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
     {@/each}
     * */
    $${config.apiName}.prototype.$${req.fnName} = function (_paramObj, success, error) {
        var deferred = $q.defer();
        var paramArr = [];
        var paramObj = _paramObj;
        var options;
        if (!angular.isObject(paramObj)) {
            paramObj = {};
        }
        {@each req.parameters as parameter,pIndex}
        paramArr.push({
            name: '$${parameter.name}',
            required: {@if parameter.required}true{@else}false{@/if},
            localIn: '$${parameter.in}'
        });
        {@/each}
        if (Utils.lackParam(deferred.reject, paramArr, paramObj, error)) {
            return deferred.promise;
        }
        options = {
            url: this.urlPre + '$${index}',
            {@if req.headerStr}headers: {@/if}$${req.headerStr}{@if req.headerStr},{@/if}
            method: '$${key}'
        };
        options = Utils.getOptions(options, paramArr, paramObj);
    {@if req.transformRequestAsForm}
        options.transformRequest = {@if req.transformRequestFormData}Utils.transformRequestFormData{@else}Utils.transformRequestAsForm{@/if};
    {@/if}
        Utils.sendReq($http, deferred, options, success, error);
        return deferred.promise;
    };
        {@/each}
    {@/each}
    return $${config.apiName};
}]);
