/**
 * 标题：          $${swagger.info.title}
 * 版本：          $${swagger.info.version}
 * 描述：          $${swagger.info.description}
 * 时间：          $${config.createTime}
 * swagger版本：   $${swagger.swagger}
 */
angular.module('$${config.apiName}Module', [])

/*
* 外部暴露使用的API
* */
.factory('$${config.apiName}', ['$http', '$q', function ($http, $q) {
    var urlPre = '$${swagger.urlPre}';
    return {
    {@each swagger.paths as path,index}
        {@each path as req,key}
        /*
         * $${req.description}
         {@each req.parameters as parameter,pIndex}
         * @param [$${parameter.name}] [{@if parameter.required}必要{@else}可选{@/if}] [类型: $${parameter.type}{@if parameter.schema}$${parameter.schema.$ref}{@/if}] [描述: $${parameter.description}]
         {@/each}
         * */
        $${req.fnName}: function (paramObj, success, error) {
            if (!angular.isObject(paramObj)) {
                paramObj = {};
            }
            var deferred = $q.defer();
            var paramArr = [];
            {@each req.parameters as parameter,pIndex}
            paramArr.push({
                name: '$${parameter.name}',
                required: {@if parameter.required}true{@else}false{@/if},
                localIn: '$${parameter.in}'
            });
            {@/each}
            if (lackParam(deferred, paramArr, paramObj, error)) {
                return deferred.promise;
            }
            var options = {
                url: urlPre + '$${swagger.pathsUrl[index]}',
                {@if req.headerStr}headers: {@/if}$${req.headerStr}{@if req.headerStr},{@/if}
                method: '$${key}'
            };
            options = getOptions (options, paramArr, paramObj);
        {@if req.transformRequestAsForm}
            options.transformRequest = {@if req.transformRequestFormData}transformRequestFormData{@else}transformRequestAsForm{@/if};
        {@/if}
            sendReq ($http, deferred, options, success, error);
            return deferred.promise;
        }{@if !req.lastOneReq},{@/if}
        {@/each}
    {@/each}
    };
}]);

/*
* 发送请求
* */
function sendReq ($http, deferred, options, success, error) {
    $http(options)
        .success(function(data) {
            if (angular.isFunction(success)) {
                data = success(data);
            }
            deferred.resolve(data);
        })
        .error(function(data, status, headers, config) {
            var err = {
                status: status,
                headers: headers,
                config: config,
                message: data
            };
            if (angular.isFunction(error)) {
                err = error(err);
            }
            deferred.reject(err);
        });
}
/*
* 生成options
* */
function getOptions (options, paramArr, paramObj) {
    var objParam = {};
    var tempObj = getParams (paramArr, paramObj);
    var form = tempObj.form;
    var body = tempObj.body;
    var headers = tempObj.headers;
    var urlParam = tempObj.urlParam;
    if (Object.keys(form).length > 0) {
        objParam = form;
    } else {
        objParam = body;
    }
    options.params = urlParam;
    options.data = objParam;

    var headerKeys = Object.keys(headers);
    if (headerKeys.length > 0) {
        var temp;
        options.headers = options.headers || {};
        headerKeys.forEach(function (key) {
            temp = headers[key];
            options.headers[key] = headers[key];
        });
    }
    return options;
}

/*
* toJsonReplacer
* */
function toJsonReplacer(key, value) {
    var val = value;

    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
        val = undefined;
    } else if (value && value.window === value) {
        val = '$WINDOW';
    } else if (value &&  window.document === value) {
        val = '$DOCUMENT';
    } else if (value && value.$evalAsync && value.$watch) {
        val = '$SCOPE';
    }

    return val;
}

{@include file://./common-fn-template.juicer, _}