/*
* 工具对象
* */
var Utils = {};

/*
* 判断null 或 undefined
* */
Utils.isNullOrUndefined = function (value) {
    return (typeof value === 'undefined' || value === null);
};

/*
* isUndefined
* */
Utils.isUndefined = function (value) {
    return typeof value === 'undefined';
};

/*
* isFunction
* */
Utils.isFunction = function (value) {
    return typeof value === 'function';
};

/*
* isObject
* */
Utils.isObject = function (value) {
    return value !== null && typeof value === 'object';
};

/*
* toJson
* */
Utils.toJson = function (obj) {
    var rFn = null;
    var undefinedValue;
    if (Utils.isUndefined(obj)) return undefinedValue;
    if (Utils.isFunction(Utils.toJsonReplacer)) {
        rFn = Utils.toJsonReplacer;
    }
    return JSON.stringify(obj, rFn, null);
};

/*
* 参数赋值
* */
Utils.getParams = function (paramArr, paramObj) {
    var tempObj = {};
    var key;
    var localIn;
    var temp;
    tempObj.urlParam = {};
    tempObj.body = {};
    tempObj.form = {};
    tempObj.headers = {};
    paramArr.forEach(function (item, index) {
        key = item.name;
        localIn = item.localIn;
        temp = paramObj[key];
        if (!Utils.isNullOrUndefined(temp)) {
            switch (localIn) {
                case 'body':
                    tempObj.body = temp;
                    break;
                case 'formData':
                    tempObj.form[key] = temp;
                    break;
                case 'header':
                    tempObj.headers[key] = temp;
                    break;
                default:
                    tempObj.urlParam[key] = temp;
            }
        }
    });
    return tempObj;
};

/*
* 必须参数校验
* */
Utils.lackParam = function (reject, paramArr, paramObj, error) {
    var key;
    var required;
    var lackArr = [];
    var err;
    paramArr.forEach(function (item, index) {
        key = item.name;
        required = item.required;
        if (required && Utils.isNullOrUndefined(paramObj[key])) {
            lackArr.push(key);
        }
    });
    if (lackArr.length > 0) {
        err = new Error('缺少必要参数: ' + lackArr.join(', ') + ' !');
        if (Utils.isFunction(error)) {
            err = error(err);
        }
        reject(err);
        return true;
    }
    return false;
};

/*
* multipart/form-data 类型表单,通常用于上传文件
* */
Utils.transformRequestFormData = function (data, headersGetter) {
    var undefinedValue;
    var headers = headersGetter();
    var fd;
    var createKey;
    var addToFd;
    headers['Content-Type'] = undefinedValue;
    if (!Utils.isObject(data)) {
        return (Utils.isNullOrUndefined(data) ? '' : data.toString());
    }

    fd = new FormData();
    createKey = function (_keys_, currentKey) {
        var formKey;
        var keys = JSON.parse(JSON.stringify(_keys_));
        keys.push(currentKey);
        formKey = keys.shift();
        if (keys.length) {
            formKey += '[' + keys.join('][') + ']';
        }
        return formKey;
    };

    addToFd = function (object, keys) {
        var value;
        var formKey;
        var len;
        var _keys;
        var key;
        var i;
        for (key in object) {
            if (!object.hasOwnProperty(key)) {
                continue;
            }
            value = object[key];
            formKey = createKey(keys, key);

            if (value instanceof File) {
                fd.append(formKey, value);
            } else if (value instanceof FileList) {
                len = value.length;
                if (len === 1) {
                    fd.append(formKey, value[0]);
                } else {
                    for (i = 0; i < len; i++) {
                        fd.append(formKey + '[' + i + ']', value[i]);
                    }
                }
            } else if (Utils.isObject(value)) {
                _keys = JSON.parse(JSON.stringify(keys));
                _keys.push(key);
                addToFd(value, _keys);
            } else {
                fd.append(formKey, value);
            }
        }
    };
    addToFd(data, []);
    return fd;
};

/*
* application/x-www-form-urlencoded 类型表单,普通表单类型
* */
Utils.transformRequestAsForm = function (data, getHeaders) {
    var headers = getHeaders();
    var buffer = [];
    var value;
    var encodedStr;
    var key;
    function rfc3986 (str) {
        return str.replace(/[!'()*]/g, function (c) {
            return '%' + c.charCodeAt(0).toString(16).toUpperCase();
        });
    }
    headers[ 'Content-Type' ] = 'application/x-www-form-urlencoded; charset=utf-8';
    if (!Utils.isObject(data)) {
        return (Utils.isNullOrUndefined(data) ? '' : data.toString());
    }

    // Serialize each key in the object.
    for (key in data) {
        if (!data.hasOwnProperty(key)) {
            continue;
        }
        value = data[key];
        if (Utils.isNullOrUndefined(value)) {
            value = '';
        } else if (Utils.isObject(value)) {
            value = Utils.toJson(value);
        }
        buffer.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }

    encodedStr = buffer.join('&').replace(/%20/g, '+');
    return rfc3986(encodedStr);
};
